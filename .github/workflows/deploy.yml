name: Build and Deploy FastAPI Microservice

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/fastapi-service
  DOCKER_TAG: ${{ github.sha }}

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
          ${{ env.DOCKER_IMAGE }}:latest
        cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache
        cache-to: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache,mode=max
    
    - name: Image digest
      run: echo "Image pushed with tag ${{ env.DOCKER_TAG }}"

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r app/requirements.txt
        pip install pytest httpx
    
    - name: Run unit tests
      run: |
        # Add your test commands here
        # pytest tests/unit/
        echo "Tests would run here"
    
    - name: Pull Docker image
      run: docker pull ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
    
    - name: Run container smoke test
      run: |
        docker run -d -p 8000:8000 --name fastapi-test ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
        sleep 10
        curl -f http://localhost:8000/health || exit 1
        curl -f http://localhost:8000/ || exit 1
        docker stop fastapi-test

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.your-domain.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}
    
    - name: Update image tag in manifests
      run: |
        sed -i "s|image: fastapi-service:latest|image: ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}|g" k8s/deployment.yaml
    
    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml
        kubectl apply -f k8s/hpa.yaml
        kubectl apply -f k8s/nginx-configmap.yaml
        kubectl apply -f k8s/nginx-deployment.yaml
    
    - name: Wait for deployment
      run: |
        kubectl rollout status deployment/fastapi-deployment --timeout=5m
        kubectl rollout status deployment/nginx-loadbalancer --timeout=5m
    
    - name: Verify deployment
      run: |
        kubectl get pods
        kubectl get services

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://api.your-domain.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}
    
    - name: Update image tag in manifests
      run: |
        sed -i "s|image: fastapi-service:latest|image: ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}|g" k8s/deployment.yaml
    
    - name: Deploy monitoring stack
      run: |
        kubectl apply -f k8s/prometheus.yaml
        kubectl apply -f k8s/grafana.yaml
    
    - name: Deploy application
      run: |
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml
        kubectl apply -f k8s/hpa.yaml
        kubectl apply -f k8s/nginx-configmap.yaml
        kubectl apply -f k8s/nginx-deployment.yaml
    
    - name: Wait for deployment
      run: |
        kubectl rollout status deployment/fastapi-deployment --timeout=10m
        kubectl rollout status deployment/nginx-loadbalancer --timeout=5m
    
    - name: Verify deployment
      run: |
        kubectl get pods
        kubectl get services
        kubectl get hpa
    
    - name: Run smoke tests
      run: |
        # Get the LoadBalancer IP
        SERVICE_IP=$(kubectl get svc nginx-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        
        # Wait for service to be ready
        sleep 30
        
        # Run smoke tests
        curl -f http://$SERVICE_IP/health || exit 1
        curl -f http://$SERVICE_IP/ || exit 1
        
        echo "âœ… Production deployment successful!"

  load-test:
    name: Run Load Tests
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Locust
      run: |
        pip install locust
    
    - name: Run load test
      run: |
        cd tests
        # Run a quick load test (1000 users for 2 minutes)
        locust -f load_test.py \
          --host=https://staging.your-domain.com \
          --users 1000 \
          --spawn-rate 50 \
          --run-time 2m \
          --headless \
          --html report.html
    
    - name: Upload load test report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: load-test-report
        path: tests/report.html

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Deployment notification
      run: |
        echo "Deployment completed!"
        echo "Status: ${{ needs.deploy-production.result }}"
        # Add Slack/Discord/Email notification here
